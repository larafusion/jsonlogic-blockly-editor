<?php

namespace LaraFusion\Editor\JsonLogicBlockly\Form\Field;

use Encore\Admin\Form\Field;

class JsonLogicEditor extends Field
{
    protected $view = 'jsonlogic-blockly-editor::form.jsonlogic';

    protected bool $hide = false;

    protected bool $readonly = false;

    protected $variables = [];

    protected static $css = [
        '/vendor/larafusion/jsonlogic-blockly-editor/css/blockly-editor.css'
    ];

    protected static $js = [
        '/vendor/larafusion/jsonlogic-blockly-editor/js/blockly_compressed.js',
        '/vendor/larafusion/jsonlogic-blockly-editor/js/en.js',
        '/vendor/larafusion/jsonlogic-blockly-editor/js/field_textbutton.js',
        '/vendor/larafusion/jsonlogic-blockly-editor/js/menuly_override.js',
        '/vendor/larafusion/jsonlogic-blockly-editor/js/menuly_blocks.js',
        '/vendor/larafusion/jsonlogic-blockly-editor/js/menuly_codegen.js',
        '/vendor/larafusion/jsonlogic-blockly-editor/js/menuly_2blocks.js'
    ];

    public function render()
    {
        $name = $this->formatName($this->column);

        $this->variables = [
            'hide' => $this->hide,
        ];

        $readOnly = (bool)$this->readonly;

        $this->script = <<<EOT

Blockly.inject(document.getElementById('blocklyDiv'), {
    toolbox: document.getElementById('toolbox'),
    img: '/vendor/larafusion/jsonlogic-blockly-editor/img/',
    sounds: true,
    collapse: true,
    comments: true,
    disable: false,
    scrollbars: true,
    trashcan: true
});

Blockly.addChangeListener(function () {
    document.getElementsByName('$name')[0].value = Blockly.JSON.fromWorkspace(Blockly.getMainWorkspace());
});

var jsonValue = document.getElementsByName('$name')[0].value;
jsonString = jsonValue === '' ? 'null' : jsonValue;

Blockly.JSON.toWorkspace(jsonString, Blockly.getMainWorkspace());

EOT;

        return parent::render(); // TODO: Change the autogenerated stub
    }

    public function hide()
    {
        $this->hide = true;

        return $this;
    }

    public function readonly()
    {
        $this->readonly = true;

        return $this;
    }
}
